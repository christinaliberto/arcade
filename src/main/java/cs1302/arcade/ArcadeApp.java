package cs1302.arcade;

import javafx.geometry.Pos;
import java.util.Random;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.control.Label;
import javafx.stage.Modality;
import javafx.event.ActionEvent; 
import javafx.scene.image.ImageView;
import javafx.scene.layout.Background; 
import javafx.scene.layout.BackgroundImage;
import javafx.scene.image.Image;
import javafx.scene.layout.BackgroundRepeat;
import javafx.scene.layout.BackgroundPosition;
import javafx.scene.layout.BackgroundSize; 
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.scene.effect.Reflection;
import javafx.scene.text.FontWeight; 
import javafx.scene.text.Font;

/**
 * Application subclass for {@code ArcadeApp}.
 * @version 2019.fa
 */

public class ArcadeApp extends Application {

    Group group = new Group();           // main container
    Random rng = new Random();           // random number generator
    Rectangle r = new Rectangle(20, 20); // some rectangle

    /**
     * Return a mouse event handler that moves to the rectangle to a random
     * position any time a mouse event is generated by the associated node.
     * @return the mouse event handler
     */
    private EventHandler<? super MouseEvent> clickMancala() {
        return event -> {
            playMancala();
        };
    } // createMouseHandler

    private EventHandler<? super MouseEvent> clickTetris() {
        return event -> {
            playTetris();
        };
    } // createMouseHandler

    /**
     * Return a key event handler that moves to the rectangle to the left
     * or the right depending on what key event is generated by the associated
     * node.
     * @return the key event handler
     */
    private EventHandler<? super KeyEvent> createKeyHandler() {
        return event -> {
            System.out.println(event);
            switch (event.getCode()) {
            case LEFT:  // KeyCode.LEFT
                r.setX(r.getX() - 10.0);
                break;
            case RIGHT: // KeyCode.RIGHT
                r.setX(r.getX() + 10.0);
                break;
            default:
                // do nothing
            } // switch
            // TODO bounds checking
        };
    } // createKeyHandler

    /** {@inheritDoc} */
    @Override
    public void start(Stage stage) {

        /* You are allowed to rewrite this start method, add other methods,
         * files, classes, etc., as needed. This currently contains some
         * simple sample code for mouse and keyboard interactions with a node
         * (rectangle) in a group.
         */

        r.setX(50);                                // 50px in the x direction (right)
        r.setY(50);                                // 50ps in the y direction (down)
        group.getChildren().add(r);                // add to main container
        //r.setOnMouseClicked(createMouseHandler()); // clicks on the rectangle move it randomly
        group.setOnKeyPressed(createKeyHandler()); // left-right key presses move the rectangle

	VBox main = new VBox();
	HBox games = new HBox();

	Text welcome = new Text();
	welcome.setX(10);
	welcome.setY(50);
	welcome.setCache(true);
	welcome.setText("Welcome to the 530 Coding Queens Arcade!");
	welcome.setFill(Color.RED);
	welcome.setFont(Font.font(null, FontWeight.BOLD, 20));
	Reflection r = new Reflection();
	r.setFraction(0.7f);
	welcome.setEffect(r);

	Image crownImage = new Image("file:resources/Crown-Background-300x300.jpg", 500, 500, false, false); 

	BackgroundImage crowns = new BackgroundImage(crownImage, BackgroundRepeat.NO_REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.DEFAULT, BackgroundSize.DEFAULT);
	Background background = new Background(crowns); 
	

	ImageView mancalaPic = new ImageView(new Image("http://iomega-europe.com/wp-content/uploads/2018/01/logo-mancala.png", 100, 100, false, false));
	ImageView tetrisPic = new ImageView(new Image("https://ideakreativa.net/wp-content/uploads/2019/06/tetris-nuevo-logo-300x300.jpg", 100, 100, false, false));

	mancalaPic.setTranslateX(300);
	mancalaPic.setTranslateY(250);
	 
	tetrisPic.setTranslateY(250); 
	mancalaPic.setOnMouseClicked(clickMancala());
	tetrisPic.setOnMouseClicked(clickTetris());
	games.getChildren().addAll(mancalaPic, tetrisPic);
	main.getChildren().add(welcome);
	main.getChildren().add(games); 
	main.setBackground(background);

	Scene scene = new Scene(main, 500, 500);


        stage.setTitle("cs1302-arcade!");
        stage.setScene(scene);
        stage.sizeToScene();
        stage.show();

        // the group must request input focus to receive key events
        // @see https://docs.oracle.com/javase/8/javafx/api/javafx/scene/Node.html#requestFocus--
        group.requestFocus();

    } // start

    public void playMancala() {

	Stage mancala = new Stage();

	mancala.initModality(Modality.APPLICATION_MODAL);


	Image woodenBoard = new Image("file:resources/wood_background_hd_picture_5_169810.jpg", 552, 368, false, false);
	BackgroundImage wooden = new BackgroundImage(woodenBoard, BackgroundRepeat.NO_REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.DEFAULT, BackgroundSize.DEFAULT);
	Background mancalaBackground = new Background(wooden);

	VBox vbox = new VBox();

	vbox.setBackground(mancalaBackground);

     	Scene scene = new Scene(vbox, 552, 368);
	  
	mancala.setTitle("Mancala");
	mancala.setWidth(552);
	mancala.setHeight(368);
	mancala.setScene(scene);
	 
	mancala.show();
    }

    public void playTetris() {

	Stage tetris = new Stage();
	tetris.initModality(Modality.APPLICATION_MODAL);
	VBox vbox = new VBox();
	
	Scene scene = new Scene(vbox);
	scene.setFill(Color.BLACK); 
	tetris.setTitle("Tetris");
	tetris.setWidth(500);
	tetris.setHeight(500);
	tetris.setScene(scene);
	tetris.show();
    }
	

} // ArcadeApp
